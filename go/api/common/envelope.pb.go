//
// This program source code file is part of KiCad, a free EDA CAD application.
//
// Copyright (C) 2024 KiCad Developers, see AUTHORS.txt for contributors.
//
// This program is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at your
// option) any later version.
//
// This program is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License along
// with this program.  If not, see <http://www.gnu.org/licenses/>.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: common/envelope.proto

package common

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ApiStatusCode int32

const (
	ApiStatusCode_AS_UNKNOWN        ApiStatusCode = 0
	ApiStatusCode_AS_OK             ApiStatusCode = 1 // Request succeeded
	ApiStatusCode_AS_TIMEOUT        ApiStatusCode = 2 // Request timed out
	ApiStatusCode_AS_BAD_REQUEST    ApiStatusCode = 3 // The request had invalid parameters or otherwise was illegal
	ApiStatusCode_AS_NOT_READY      ApiStatusCode = 4 // KiCad has recently started and cannot handle API requests yet
	ApiStatusCode_AS_UNHANDLED      ApiStatusCode = 5 // The request was not handled by KiCad
	ApiStatusCode_AS_TOKEN_MISMATCH ApiStatusCode = 6 // The kicad_token in the request didn't match this KiCad's token
	ApiStatusCode_AS_BUSY           ApiStatusCode = 7 // KiCad is busy performing an operation and can't accept API commands
	ApiStatusCode_AS_UNIMPLEMENTED  ApiStatusCode = 8 // The requested API call has not yet been implemented
)

// Enum value maps for ApiStatusCode.
var (
	ApiStatusCode_name = map[int32]string{
		0: "AS_UNKNOWN",
		1: "AS_OK",
		2: "AS_TIMEOUT",
		3: "AS_BAD_REQUEST",
		4: "AS_NOT_READY",
		5: "AS_UNHANDLED",
		6: "AS_TOKEN_MISMATCH",
		7: "AS_BUSY",
		8: "AS_UNIMPLEMENTED",
	}
	ApiStatusCode_value = map[string]int32{
		"AS_UNKNOWN":        0,
		"AS_OK":             1,
		"AS_TIMEOUT":        2,
		"AS_BAD_REQUEST":    3,
		"AS_NOT_READY":      4,
		"AS_UNHANDLED":      5,
		"AS_TOKEN_MISMATCH": 6,
		"AS_BUSY":           7,
		"AS_UNIMPLEMENTED":  8,
	}
)

func (x ApiStatusCode) Enum() *ApiStatusCode {
	p := new(ApiStatusCode)
	*p = x
	return p
}

func (x ApiStatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ApiStatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_common_envelope_proto_enumTypes[0].Descriptor()
}

func (ApiStatusCode) Type() protoreflect.EnumType {
	return &file_common_envelope_proto_enumTypes[0]
}

func (x ApiStatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ApiStatusCode.Descriptor instead.
func (ApiStatusCode) EnumDescriptor() ([]byte, []int) {
	return file_common_envelope_proto_rawDescGZIP(), []int{0}
}

// For future expansion: any header fields that should be sent with a request
type ApiRequestHeader struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// An opaque string identifying a running instance of KiCad.  If this is set to a non-empty
	// string in an API request, KiCad will reject the request if the value doesn't match its own
	// token.  This can be used to let API clients make sure they are still talking to the same
	// instance of KiCad if they are long-running.
	KicadToken string `protobuf:"bytes,1,opt,name=kicad_token,json=kicadToken,proto3" json:"kicad_token,omitempty"`
	// A string identifying an API client.  Should be set by the client to a value that is unique
	// to a specific instance of a client, for example the package name of the client plus its
	// process ID or a random string, e.g. "com.github.me.my_awesome_plugin-73951".  The main purpose
	// of this name is to identify the client in debug logs.
	ClientName    string `protobuf:"bytes,2,opt,name=client_name,json=clientName,proto3" json:"client_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApiRequestHeader) Reset() {
	*x = ApiRequestHeader{}
	mi := &file_common_envelope_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApiRequestHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiRequestHeader) ProtoMessage() {}

func (x *ApiRequestHeader) ProtoReflect() protoreflect.Message {
	mi := &file_common_envelope_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiRequestHeader.ProtoReflect.Descriptor instead.
func (*ApiRequestHeader) Descriptor() ([]byte, []int) {
	return file_common_envelope_proto_rawDescGZIP(), []int{0}
}

func (x *ApiRequestHeader) GetKicadToken() string {
	if x != nil {
		return x.KicadToken
	}
	return ""
}

func (x *ApiRequestHeader) GetClientName() string {
	if x != nil {
		return x.ClientName
	}
	return ""
}

// The top-level envelope container for an API request (message from a client to the KiCad API server)
type ApiRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Header        *ApiRequestHeader      `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Message       *anypb.Any             `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApiRequest) Reset() {
	*x = ApiRequest{}
	mi := &file_common_envelope_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApiRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiRequest) ProtoMessage() {}

func (x *ApiRequest) ProtoReflect() protoreflect.Message {
	mi := &file_common_envelope_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiRequest.ProtoReflect.Descriptor instead.
func (*ApiRequest) Descriptor() ([]byte, []int) {
	return file_common_envelope_proto_rawDescGZIP(), []int{1}
}

func (x *ApiRequest) GetHeader() *ApiRequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ApiRequest) GetMessage() *anypb.Any {
	if x != nil {
		return x.Message
	}
	return nil
}

// For future expansion: any header fields that should be sent with a response
type ApiResponseHeader struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// / An opaque string identifying a running instance of KiCad.
	KicadToken    string `protobuf:"bytes,1,opt,name=kicad_token,json=kicadToken,proto3" json:"kicad_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApiResponseHeader) Reset() {
	*x = ApiResponseHeader{}
	mi := &file_common_envelope_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApiResponseHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiResponseHeader) ProtoMessage() {}

func (x *ApiResponseHeader) ProtoReflect() protoreflect.Message {
	mi := &file_common_envelope_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiResponseHeader.ProtoReflect.Descriptor instead.
func (*ApiResponseHeader) Descriptor() ([]byte, []int) {
	return file_common_envelope_proto_rawDescGZIP(), []int{2}
}

func (x *ApiResponseHeader) GetKicadToken() string {
	if x != nil {
		return x.KicadToken
	}
	return ""
}

type ApiResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Header        *ApiResponseHeader     `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Status        *ApiResponseStatus     `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Message       *anypb.Any             `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApiResponse) Reset() {
	*x = ApiResponse{}
	mi := &file_common_envelope_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApiResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiResponse) ProtoMessage() {}

func (x *ApiResponse) ProtoReflect() protoreflect.Message {
	mi := &file_common_envelope_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiResponse.ProtoReflect.Descriptor instead.
func (*ApiResponse) Descriptor() ([]byte, []int) {
	return file_common_envelope_proto_rawDescGZIP(), []int{3}
}

func (x *ApiResponse) GetHeader() *ApiResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ApiResponse) GetStatus() *ApiResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ApiResponse) GetMessage() *anypb.Any {
	if x != nil {
		return x.Message
	}
	return nil
}

type ApiResponseStatus struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// / A code describing the category of error (or AS_OK if no error)
	Status ApiStatusCode `protobuf:"varint,1,opt,name=status,proto3,enum=kiapi.common.ApiStatusCode" json:"status,omitempty"`
	// / A human-readable description of the error, if any
	ErrorMessage  string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApiResponseStatus) Reset() {
	*x = ApiResponseStatus{}
	mi := &file_common_envelope_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApiResponseStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiResponseStatus) ProtoMessage() {}

func (x *ApiResponseStatus) ProtoReflect() protoreflect.Message {
	mi := &file_common_envelope_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiResponseStatus.ProtoReflect.Descriptor instead.
func (*ApiResponseStatus) Descriptor() ([]byte, []int) {
	return file_common_envelope_proto_rawDescGZIP(), []int{4}
}

func (x *ApiResponseStatus) GetStatus() ApiStatusCode {
	if x != nil {
		return x.Status
	}
	return ApiStatusCode_AS_UNKNOWN
}

func (x *ApiResponseStatus) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

var File_common_envelope_proto protoreflect.FileDescriptor

const file_common_envelope_proto_rawDesc = "" +
	"\n" +
	"\x15common/envelope.proto\x12\fkiapi.common\x1a\x19google/protobuf/any.proto\"T\n" +
	"\x10ApiRequestHeader\x12\x1f\n" +
	"\vkicad_token\x18\x01 \x01(\tR\n" +
	"kicadToken\x12\x1f\n" +
	"\vclient_name\x18\x02 \x01(\tR\n" +
	"clientName\"t\n" +
	"\n" +
	"ApiRequest\x126\n" +
	"\x06header\x18\x01 \x01(\v2\x1e.kiapi.common.ApiRequestHeaderR\x06header\x12.\n" +
	"\amessage\x18\x02 \x01(\v2\x14.google.protobuf.AnyR\amessage\"4\n" +
	"\x11ApiResponseHeader\x12\x1f\n" +
	"\vkicad_token\x18\x01 \x01(\tR\n" +
	"kicadToken\"\xaf\x01\n" +
	"\vApiResponse\x127\n" +
	"\x06header\x18\x01 \x01(\v2\x1f.kiapi.common.ApiResponseHeaderR\x06header\x127\n" +
	"\x06status\x18\x02 \x01(\v2\x1f.kiapi.common.ApiResponseStatusR\x06status\x12.\n" +
	"\amessage\x18\x03 \x01(\v2\x14.google.protobuf.AnyR\amessage\"m\n" +
	"\x11ApiResponseStatus\x123\n" +
	"\x06status\x18\x01 \x01(\x0e2\x1b.kiapi.common.ApiStatusCodeR\x06status\x12#\n" +
	"\rerror_message\x18\x02 \x01(\tR\ferrorMessage*\xac\x01\n" +
	"\rApiStatusCode\x12\x0e\n" +
	"\n" +
	"AS_UNKNOWN\x10\x00\x12\t\n" +
	"\x05AS_OK\x10\x01\x12\x0e\n" +
	"\n" +
	"AS_TIMEOUT\x10\x02\x12\x12\n" +
	"\x0eAS_BAD_REQUEST\x10\x03\x12\x10\n" +
	"\fAS_NOT_READY\x10\x04\x12\x10\n" +
	"\fAS_UNHANDLED\x10\x05\x12\x15\n" +
	"\x11AS_TOKEN_MISMATCH\x10\x06\x12\v\n" +
	"\aAS_BUSY\x10\a\x12\x14\n" +
	"\x10AS_UNIMPLEMENTED\x10\bB\x1fZ\x1dgithub.com/kicad/proto/commonb\x06proto3"

var (
	file_common_envelope_proto_rawDescOnce sync.Once
	file_common_envelope_proto_rawDescData []byte
)

func file_common_envelope_proto_rawDescGZIP() []byte {
	file_common_envelope_proto_rawDescOnce.Do(func() {
		file_common_envelope_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_common_envelope_proto_rawDesc), len(file_common_envelope_proto_rawDesc)))
	})
	return file_common_envelope_proto_rawDescData
}

var file_common_envelope_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_common_envelope_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_common_envelope_proto_goTypes = []any{
	(ApiStatusCode)(0),        // 0: kiapi.common.ApiStatusCode
	(*ApiRequestHeader)(nil),  // 1: kiapi.common.ApiRequestHeader
	(*ApiRequest)(nil),        // 2: kiapi.common.ApiRequest
	(*ApiResponseHeader)(nil), // 3: kiapi.common.ApiResponseHeader
	(*ApiResponse)(nil),       // 4: kiapi.common.ApiResponse
	(*ApiResponseStatus)(nil), // 5: kiapi.common.ApiResponseStatus
	(*anypb.Any)(nil),         // 6: google.protobuf.Any
}
var file_common_envelope_proto_depIdxs = []int32{
	1, // 0: kiapi.common.ApiRequest.header:type_name -> kiapi.common.ApiRequestHeader
	6, // 1: kiapi.common.ApiRequest.message:type_name -> google.protobuf.Any
	3, // 2: kiapi.common.ApiResponse.header:type_name -> kiapi.common.ApiResponseHeader
	5, // 3: kiapi.common.ApiResponse.status:type_name -> kiapi.common.ApiResponseStatus
	6, // 4: kiapi.common.ApiResponse.message:type_name -> google.protobuf.Any
	0, // 5: kiapi.common.ApiResponseStatus.status:type_name -> kiapi.common.ApiStatusCode
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_common_envelope_proto_init() }
func file_common_envelope_proto_init() {
	if File_common_envelope_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_common_envelope_proto_rawDesc), len(file_common_envelope_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_common_envelope_proto_goTypes,
		DependencyIndexes: file_common_envelope_proto_depIdxs,
		EnumInfos:         file_common_envelope_proto_enumTypes,
		MessageInfos:      file_common_envelope_proto_msgTypes,
	}.Build()
	File_common_envelope_proto = out.File
	file_common_envelope_proto_goTypes = nil
	file_common_envelope_proto_depIdxs = nil
}
