//
// This program source code file is part of KiCad, a free EDA CAD application.
//
// Copyright (C) 2024 KiCad Developers, see AUTHORS.txt for contributors.
//
// This program is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at your
// option) any later version.
//
// This program is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License along
// with this program.  If not, see <http://www.gnu.org/licenses/>.

//
// enums.proto
// Includes protobuf versions of common KiCad enums

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: common/types/enums.proto

package types

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The set of object types (from KICAD_T) that are exposed to the API.
type KiCadObjectType int32

const (
	KiCadObjectType_KOT_UNKNOWN             KiCadObjectType = 0
	KiCadObjectType_KOT_PCB_FOOTPRINT       KiCadObjectType = 1
	KiCadObjectType_KOT_PCB_PAD             KiCadObjectType = 2
	KiCadObjectType_KOT_PCB_SHAPE           KiCadObjectType = 3
	KiCadObjectType_KOT_PCB_REFERENCE_IMAGE KiCadObjectType = 4
	KiCadObjectType_KOT_PCB_FIELD           KiCadObjectType = 5
	KiCadObjectType_KOT_PCB_GENERATOR       KiCadObjectType = 6
	KiCadObjectType_KOT_PCB_TEXT            KiCadObjectType = 7
	KiCadObjectType_KOT_PCB_TEXTBOX         KiCadObjectType = 8
	KiCadObjectType_KOT_PCB_TABLE           KiCadObjectType = 9
	KiCadObjectType_KOT_PCB_TABLECELL       KiCadObjectType = 10
	KiCadObjectType_KOT_PCB_TRACE           KiCadObjectType = 11
	KiCadObjectType_KOT_PCB_VIA             KiCadObjectType = 12
	KiCadObjectType_KOT_PCB_ARC             KiCadObjectType = 13
	KiCadObjectType_KOT_PCB_MARKER          KiCadObjectType = 14
	KiCadObjectType_KOT_PCB_DIMENSION       KiCadObjectType = 15
	KiCadObjectType_KOT_PCB_ZONE            KiCadObjectType = 16
	KiCadObjectType_KOT_PCB_GROUP           KiCadObjectType = 17
	KiCadObjectType_KOT_SCH_MARKER          KiCadObjectType = 18
	KiCadObjectType_KOT_SCH_JUNCTION        KiCadObjectType = 19
	KiCadObjectType_KOT_SCH_NO_CONNECT      KiCadObjectType = 20
	KiCadObjectType_KOT_SCH_BUS_WIRE_ENTRY  KiCadObjectType = 21
	KiCadObjectType_KOT_SCH_BUS_BUS_ENTRY   KiCadObjectType = 22
	KiCadObjectType_KOT_SCH_LINE            KiCadObjectType = 23
	KiCadObjectType_KOT_SCH_SHAPE           KiCadObjectType = 24
	KiCadObjectType_KOT_SCH_BITMAP          KiCadObjectType = 25
	KiCadObjectType_KOT_SCH_TEXTBOX         KiCadObjectType = 26
	KiCadObjectType_KOT_SCH_TEXT            KiCadObjectType = 27
	KiCadObjectType_KOT_SCH_TABLE           KiCadObjectType = 28
	KiCadObjectType_KOT_SCH_TABLECELL       KiCadObjectType = 29
	KiCadObjectType_KOT_SCH_LABEL           KiCadObjectType = 30
	KiCadObjectType_KOT_SCH_GLOBAL_LABEL    KiCadObjectType = 31
	KiCadObjectType_KOT_SCH_HIER_LABEL      KiCadObjectType = 32
	KiCadObjectType_KOT_SCH_DIRECTIVE_LABEL KiCadObjectType = 33
	KiCadObjectType_KOT_SCH_FIELD           KiCadObjectType = 34
	KiCadObjectType_KOT_SCH_SYMBOL          KiCadObjectType = 35
	KiCadObjectType_KOT_SCH_SHEET_PIN       KiCadObjectType = 36
	KiCadObjectType_KOT_SCH_SHEET           KiCadObjectType = 37
	KiCadObjectType_KOT_SCH_PIN             KiCadObjectType = 38
	KiCadObjectType_KOT_LIB_SYMBOL          KiCadObjectType = 39
	KiCadObjectType_KOT_WSG_LINE            KiCadObjectType = 45
	KiCadObjectType_KOT_WSG_RECT            KiCadObjectType = 46
	KiCadObjectType_KOT_WSG_POLY            KiCadObjectType = 47
	KiCadObjectType_KOT_WSG_TEXT            KiCadObjectType = 48
	KiCadObjectType_KOT_WSG_BITMAP          KiCadObjectType = 49
	KiCadObjectType_KOT_WSG_PAGE            KiCadObjectType = 50
	KiCadObjectType_KOT_SCH_GROUP           KiCadObjectType = 51
)

// Enum value maps for KiCadObjectType.
var (
	KiCadObjectType_name = map[int32]string{
		0:  "KOT_UNKNOWN",
		1:  "KOT_PCB_FOOTPRINT",
		2:  "KOT_PCB_PAD",
		3:  "KOT_PCB_SHAPE",
		4:  "KOT_PCB_REFERENCE_IMAGE",
		5:  "KOT_PCB_FIELD",
		6:  "KOT_PCB_GENERATOR",
		7:  "KOT_PCB_TEXT",
		8:  "KOT_PCB_TEXTBOX",
		9:  "KOT_PCB_TABLE",
		10: "KOT_PCB_TABLECELL",
		11: "KOT_PCB_TRACE",
		12: "KOT_PCB_VIA",
		13: "KOT_PCB_ARC",
		14: "KOT_PCB_MARKER",
		15: "KOT_PCB_DIMENSION",
		16: "KOT_PCB_ZONE",
		17: "KOT_PCB_GROUP",
		18: "KOT_SCH_MARKER",
		19: "KOT_SCH_JUNCTION",
		20: "KOT_SCH_NO_CONNECT",
		21: "KOT_SCH_BUS_WIRE_ENTRY",
		22: "KOT_SCH_BUS_BUS_ENTRY",
		23: "KOT_SCH_LINE",
		24: "KOT_SCH_SHAPE",
		25: "KOT_SCH_BITMAP",
		26: "KOT_SCH_TEXTBOX",
		27: "KOT_SCH_TEXT",
		28: "KOT_SCH_TABLE",
		29: "KOT_SCH_TABLECELL",
		30: "KOT_SCH_LABEL",
		31: "KOT_SCH_GLOBAL_LABEL",
		32: "KOT_SCH_HIER_LABEL",
		33: "KOT_SCH_DIRECTIVE_LABEL",
		34: "KOT_SCH_FIELD",
		35: "KOT_SCH_SYMBOL",
		36: "KOT_SCH_SHEET_PIN",
		37: "KOT_SCH_SHEET",
		38: "KOT_SCH_PIN",
		39: "KOT_LIB_SYMBOL",
		45: "KOT_WSG_LINE",
		46: "KOT_WSG_RECT",
		47: "KOT_WSG_POLY",
		48: "KOT_WSG_TEXT",
		49: "KOT_WSG_BITMAP",
		50: "KOT_WSG_PAGE",
		51: "KOT_SCH_GROUP",
	}
	KiCadObjectType_value = map[string]int32{
		"KOT_UNKNOWN":             0,
		"KOT_PCB_FOOTPRINT":       1,
		"KOT_PCB_PAD":             2,
		"KOT_PCB_SHAPE":           3,
		"KOT_PCB_REFERENCE_IMAGE": 4,
		"KOT_PCB_FIELD":           5,
		"KOT_PCB_GENERATOR":       6,
		"KOT_PCB_TEXT":            7,
		"KOT_PCB_TEXTBOX":         8,
		"KOT_PCB_TABLE":           9,
		"KOT_PCB_TABLECELL":       10,
		"KOT_PCB_TRACE":           11,
		"KOT_PCB_VIA":             12,
		"KOT_PCB_ARC":             13,
		"KOT_PCB_MARKER":          14,
		"KOT_PCB_DIMENSION":       15,
		"KOT_PCB_ZONE":            16,
		"KOT_PCB_GROUP":           17,
		"KOT_SCH_MARKER":          18,
		"KOT_SCH_JUNCTION":        19,
		"KOT_SCH_NO_CONNECT":      20,
		"KOT_SCH_BUS_WIRE_ENTRY":  21,
		"KOT_SCH_BUS_BUS_ENTRY":   22,
		"KOT_SCH_LINE":            23,
		"KOT_SCH_SHAPE":           24,
		"KOT_SCH_BITMAP":          25,
		"KOT_SCH_TEXTBOX":         26,
		"KOT_SCH_TEXT":            27,
		"KOT_SCH_TABLE":           28,
		"KOT_SCH_TABLECELL":       29,
		"KOT_SCH_LABEL":           30,
		"KOT_SCH_GLOBAL_LABEL":    31,
		"KOT_SCH_HIER_LABEL":      32,
		"KOT_SCH_DIRECTIVE_LABEL": 33,
		"KOT_SCH_FIELD":           34,
		"KOT_SCH_SYMBOL":          35,
		"KOT_SCH_SHEET_PIN":       36,
		"KOT_SCH_SHEET":           37,
		"KOT_SCH_PIN":             38,
		"KOT_LIB_SYMBOL":          39,
		"KOT_WSG_LINE":            45,
		"KOT_WSG_RECT":            46,
		"KOT_WSG_POLY":            47,
		"KOT_WSG_TEXT":            48,
		"KOT_WSG_BITMAP":          49,
		"KOT_WSG_PAGE":            50,
		"KOT_SCH_GROUP":           51,
	}
)

func (x KiCadObjectType) Enum() *KiCadObjectType {
	p := new(KiCadObjectType)
	*p = x
	return p
}

func (x KiCadObjectType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KiCadObjectType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_types_enums_proto_enumTypes[0].Descriptor()
}

func (KiCadObjectType) Type() protoreflect.EnumType {
	return &file_common_types_enums_proto_enumTypes[0]
}

func (x KiCadObjectType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KiCadObjectType.Descriptor instead.
func (KiCadObjectType) EnumDescriptor() ([]byte, []int) {
	return file_common_types_enums_proto_rawDescGZIP(), []int{0}
}

// Mapped to GR_TEXT_H_ALIGN_T
type HorizontalAlignment int32

const (
	HorizontalAlignment_HA_UNKNOWN       HorizontalAlignment = 0
	HorizontalAlignment_HA_LEFT          HorizontalAlignment = 1
	HorizontalAlignment_HA_CENTER        HorizontalAlignment = 2
	HorizontalAlignment_HA_RIGHT         HorizontalAlignment = 3
	HorizontalAlignment_HA_INDETERMINATE HorizontalAlignment = 4
)

// Enum value maps for HorizontalAlignment.
var (
	HorizontalAlignment_name = map[int32]string{
		0: "HA_UNKNOWN",
		1: "HA_LEFT",
		2: "HA_CENTER",
		3: "HA_RIGHT",
		4: "HA_INDETERMINATE",
	}
	HorizontalAlignment_value = map[string]int32{
		"HA_UNKNOWN":       0,
		"HA_LEFT":          1,
		"HA_CENTER":        2,
		"HA_RIGHT":         3,
		"HA_INDETERMINATE": 4,
	}
)

func (x HorizontalAlignment) Enum() *HorizontalAlignment {
	p := new(HorizontalAlignment)
	*p = x
	return p
}

func (x HorizontalAlignment) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HorizontalAlignment) Descriptor() protoreflect.EnumDescriptor {
	return file_common_types_enums_proto_enumTypes[1].Descriptor()
}

func (HorizontalAlignment) Type() protoreflect.EnumType {
	return &file_common_types_enums_proto_enumTypes[1]
}

func (x HorizontalAlignment) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HorizontalAlignment.Descriptor instead.
func (HorizontalAlignment) EnumDescriptor() ([]byte, []int) {
	return file_common_types_enums_proto_rawDescGZIP(), []int{1}
}

// Mapped to GR_TEXT_V_ALIGN_T
type VerticalAlignment int32

const (
	VerticalAlignment_VA_UNKNOWN       VerticalAlignment = 0
	VerticalAlignment_VA_TOP           VerticalAlignment = 1
	VerticalAlignment_VA_CENTER        VerticalAlignment = 2
	VerticalAlignment_VA_BOTTOM        VerticalAlignment = 3
	VerticalAlignment_VA_INDETERMINATE VerticalAlignment = 4
)

// Enum value maps for VerticalAlignment.
var (
	VerticalAlignment_name = map[int32]string{
		0: "VA_UNKNOWN",
		1: "VA_TOP",
		2: "VA_CENTER",
		3: "VA_BOTTOM",
		4: "VA_INDETERMINATE",
	}
	VerticalAlignment_value = map[string]int32{
		"VA_UNKNOWN":       0,
		"VA_TOP":           1,
		"VA_CENTER":        2,
		"VA_BOTTOM":        3,
		"VA_INDETERMINATE": 4,
	}
)

func (x VerticalAlignment) Enum() *VerticalAlignment {
	p := new(VerticalAlignment)
	*p = x
	return p
}

func (x VerticalAlignment) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VerticalAlignment) Descriptor() protoreflect.EnumDescriptor {
	return file_common_types_enums_proto_enumTypes[2].Descriptor()
}

func (VerticalAlignment) Type() protoreflect.EnumType {
	return &file_common_types_enums_proto_enumTypes[2]
}

func (x VerticalAlignment) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VerticalAlignment.Descriptor instead.
func (VerticalAlignment) EnumDescriptor() ([]byte, []int) {
	return file_common_types_enums_proto_rawDescGZIP(), []int{2}
}

// Mapped to LINE_STYLE
type StrokeLineStyle int32

const (
	StrokeLineStyle_SLS_UNKNOWN    StrokeLineStyle = 0
	StrokeLineStyle_SLS_DEFAULT    StrokeLineStyle = 1
	StrokeLineStyle_SLS_SOLID      StrokeLineStyle = 2
	StrokeLineStyle_SLS_DASH       StrokeLineStyle = 3
	StrokeLineStyle_SLS_DOT        StrokeLineStyle = 4
	StrokeLineStyle_SLS_DASHDOT    StrokeLineStyle = 5
	StrokeLineStyle_SLS_DASHDOTDOT StrokeLineStyle = 6
)

// Enum value maps for StrokeLineStyle.
var (
	StrokeLineStyle_name = map[int32]string{
		0: "SLS_UNKNOWN",
		1: "SLS_DEFAULT",
		2: "SLS_SOLID",
		3: "SLS_DASH",
		4: "SLS_DOT",
		5: "SLS_DASHDOT",
		6: "SLS_DASHDOTDOT",
	}
	StrokeLineStyle_value = map[string]int32{
		"SLS_UNKNOWN":    0,
		"SLS_DEFAULT":    1,
		"SLS_SOLID":      2,
		"SLS_DASH":       3,
		"SLS_DOT":        4,
		"SLS_DASHDOT":    5,
		"SLS_DASHDOTDOT": 6,
	}
)

func (x StrokeLineStyle) Enum() *StrokeLineStyle {
	p := new(StrokeLineStyle)
	*p = x
	return p
}

func (x StrokeLineStyle) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StrokeLineStyle) Descriptor() protoreflect.EnumDescriptor {
	return file_common_types_enums_proto_enumTypes[3].Descriptor()
}

func (StrokeLineStyle) Type() protoreflect.EnumType {
	return &file_common_types_enums_proto_enumTypes[3]
}

func (x StrokeLineStyle) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StrokeLineStyle.Descriptor instead.
func (StrokeLineStyle) EnumDescriptor() ([]byte, []int) {
	return file_common_types_enums_proto_rawDescGZIP(), []int{3}
}

var File_common_types_enums_proto protoreflect.FileDescriptor

const file_common_types_enums_proto_rawDesc = "" +
	"\n" +
	"\x18common/types/enums.proto\x12\x12kiapi.common.types*\xd6\a\n" +
	"\x0fKiCadObjectType\x12\x0f\n" +
	"\vKOT_UNKNOWN\x10\x00\x12\x15\n" +
	"\x11KOT_PCB_FOOTPRINT\x10\x01\x12\x0f\n" +
	"\vKOT_PCB_PAD\x10\x02\x12\x11\n" +
	"\rKOT_PCB_SHAPE\x10\x03\x12\x1b\n" +
	"\x17KOT_PCB_REFERENCE_IMAGE\x10\x04\x12\x11\n" +
	"\rKOT_PCB_FIELD\x10\x05\x12\x15\n" +
	"\x11KOT_PCB_GENERATOR\x10\x06\x12\x10\n" +
	"\fKOT_PCB_TEXT\x10\a\x12\x13\n" +
	"\x0fKOT_PCB_TEXTBOX\x10\b\x12\x11\n" +
	"\rKOT_PCB_TABLE\x10\t\x12\x15\n" +
	"\x11KOT_PCB_TABLECELL\x10\n" +
	"\x12\x11\n" +
	"\rKOT_PCB_TRACE\x10\v\x12\x0f\n" +
	"\vKOT_PCB_VIA\x10\f\x12\x0f\n" +
	"\vKOT_PCB_ARC\x10\r\x12\x12\n" +
	"\x0eKOT_PCB_MARKER\x10\x0e\x12\x15\n" +
	"\x11KOT_PCB_DIMENSION\x10\x0f\x12\x10\n" +
	"\fKOT_PCB_ZONE\x10\x10\x12\x11\n" +
	"\rKOT_PCB_GROUP\x10\x11\x12\x12\n" +
	"\x0eKOT_SCH_MARKER\x10\x12\x12\x14\n" +
	"\x10KOT_SCH_JUNCTION\x10\x13\x12\x16\n" +
	"\x12KOT_SCH_NO_CONNECT\x10\x14\x12\x1a\n" +
	"\x16KOT_SCH_BUS_WIRE_ENTRY\x10\x15\x12\x19\n" +
	"\x15KOT_SCH_BUS_BUS_ENTRY\x10\x16\x12\x10\n" +
	"\fKOT_SCH_LINE\x10\x17\x12\x11\n" +
	"\rKOT_SCH_SHAPE\x10\x18\x12\x12\n" +
	"\x0eKOT_SCH_BITMAP\x10\x19\x12\x13\n" +
	"\x0fKOT_SCH_TEXTBOX\x10\x1a\x12\x10\n" +
	"\fKOT_SCH_TEXT\x10\x1b\x12\x11\n" +
	"\rKOT_SCH_TABLE\x10\x1c\x12\x15\n" +
	"\x11KOT_SCH_TABLECELL\x10\x1d\x12\x11\n" +
	"\rKOT_SCH_LABEL\x10\x1e\x12\x18\n" +
	"\x14KOT_SCH_GLOBAL_LABEL\x10\x1f\x12\x16\n" +
	"\x12KOT_SCH_HIER_LABEL\x10 \x12\x1b\n" +
	"\x17KOT_SCH_DIRECTIVE_LABEL\x10!\x12\x11\n" +
	"\rKOT_SCH_FIELD\x10\"\x12\x12\n" +
	"\x0eKOT_SCH_SYMBOL\x10#\x12\x15\n" +
	"\x11KOT_SCH_SHEET_PIN\x10$\x12\x11\n" +
	"\rKOT_SCH_SHEET\x10%\x12\x0f\n" +
	"\vKOT_SCH_PIN\x10&\x12\x12\n" +
	"\x0eKOT_LIB_SYMBOL\x10'\x12\x10\n" +
	"\fKOT_WSG_LINE\x10-\x12\x10\n" +
	"\fKOT_WSG_RECT\x10.\x12\x10\n" +
	"\fKOT_WSG_POLY\x10/\x12\x10\n" +
	"\fKOT_WSG_TEXT\x100\x12\x12\n" +
	"\x0eKOT_WSG_BITMAP\x101\x12\x10\n" +
	"\fKOT_WSG_PAGE\x102\x12\x11\n" +
	"\rKOT_SCH_GROUP\x103*e\n" +
	"\x13HorizontalAlignment\x12\x0e\n" +
	"\n" +
	"HA_UNKNOWN\x10\x00\x12\v\n" +
	"\aHA_LEFT\x10\x01\x12\r\n" +
	"\tHA_CENTER\x10\x02\x12\f\n" +
	"\bHA_RIGHT\x10\x03\x12\x14\n" +
	"\x10HA_INDETERMINATE\x10\x04*c\n" +
	"\x11VerticalAlignment\x12\x0e\n" +
	"\n" +
	"VA_UNKNOWN\x10\x00\x12\n" +
	"\n" +
	"\x06VA_TOP\x10\x01\x12\r\n" +
	"\tVA_CENTER\x10\x02\x12\r\n" +
	"\tVA_BOTTOM\x10\x03\x12\x14\n" +
	"\x10VA_INDETERMINATE\x10\x04*\x82\x01\n" +
	"\x0fStrokeLineStyle\x12\x0f\n" +
	"\vSLS_UNKNOWN\x10\x00\x12\x0f\n" +
	"\vSLS_DEFAULT\x10\x01\x12\r\n" +
	"\tSLS_SOLID\x10\x02\x12\f\n" +
	"\bSLS_DASH\x10\x03\x12\v\n" +
	"\aSLS_DOT\x10\x04\x12\x0f\n" +
	"\vSLS_DASHDOT\x10\x05\x12\x12\n" +
	"\x0eSLS_DASHDOTDOT\x10\x06B%Z#github.com/kicad/proto/common/typesb\x06proto3"

var (
	file_common_types_enums_proto_rawDescOnce sync.Once
	file_common_types_enums_proto_rawDescData []byte
)

func file_common_types_enums_proto_rawDescGZIP() []byte {
	file_common_types_enums_proto_rawDescOnce.Do(func() {
		file_common_types_enums_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_common_types_enums_proto_rawDesc), len(file_common_types_enums_proto_rawDesc)))
	})
	return file_common_types_enums_proto_rawDescData
}

var file_common_types_enums_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_common_types_enums_proto_goTypes = []any{
	(KiCadObjectType)(0),     // 0: kiapi.common.types.KiCadObjectType
	(HorizontalAlignment)(0), // 1: kiapi.common.types.HorizontalAlignment
	(VerticalAlignment)(0),   // 2: kiapi.common.types.VerticalAlignment
	(StrokeLineStyle)(0),     // 3: kiapi.common.types.StrokeLineStyle
}
var file_common_types_enums_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_common_types_enums_proto_init() }
func file_common_types_enums_proto_init() {
	if File_common_types_enums_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_common_types_enums_proto_rawDesc), len(file_common_types_enums_proto_rawDesc)),
			NumEnums:      4,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_common_types_enums_proto_goTypes,
		DependencyIndexes: file_common_types_enums_proto_depIdxs,
		EnumInfos:         file_common_types_enums_proto_enumTypes,
	}.Build()
	File_common_types_enums_proto = out.File
	file_common_types_enums_proto_goTypes = nil
	file_common_types_enums_proto_depIdxs = nil
}
