//
// This program source code file is part of KiCad, a free EDA CAD application.
//
// Copyright (C) 2024 KiCad Developers, see AUTHORS.txt for contributors.
//
// This program is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at your
// option) any later version.
//
// This program is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License along
// with this program.  If not, see <http://www.gnu.org/licenses/>.

//
// project_settings.proto
// Messages that describes project settings shared between schematics and boards

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: common/types/project_settings.proto

package types

import (
	board "github.com/kicad/proto/board"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NetClassType int32

const (
	NetClassType_NCT_UNKNOWN NetClassType = 0
	// An explicitly-defined netclass, created by the user and saved in the project file
	NetClassType_NCT_EXPLICIT NetClassType = 1
	// An implicit (effective) netclass, made up of multiple explicit netclasses
	NetClassType_NCT_IMPLICIT NetClassType = 2
)

// Enum value maps for NetClassType.
var (
	NetClassType_name = map[int32]string{
		0: "NCT_UNKNOWN",
		1: "NCT_EXPLICIT",
		2: "NCT_IMPLICIT",
	}
	NetClassType_value = map[string]int32{
		"NCT_UNKNOWN":  0,
		"NCT_EXPLICIT": 1,
		"NCT_IMPLICIT": 2,
	}
)

func (x NetClassType) Enum() *NetClassType {
	p := new(NetClassType)
	*p = x
	return p
}

func (x NetClassType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NetClassType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_types_project_settings_proto_enumTypes[0].Descriptor()
}

func (NetClassType) Type() protoreflect.EnumType {
	return &file_common_types_project_settings_proto_enumTypes[0]
}

func (x NetClassType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NetClassType.Descriptor instead.
func (NetClassType) EnumDescriptor() ([]byte, []int) {
	return file_common_types_project_settings_proto_rawDescGZIP(), []int{0}
}

type NetClassBoardSettings struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Clearance          *Distance              `protobuf:"bytes,1,opt,name=clearance,proto3,oneof" json:"clearance,omitempty"`
	TrackWidth         *Distance              `protobuf:"bytes,2,opt,name=track_width,json=trackWidth,proto3,oneof" json:"track_width,omitempty"`
	DiffPairTrackWidth *Distance              `protobuf:"bytes,3,opt,name=diff_pair_track_width,json=diffPairTrackWidth,proto3,oneof" json:"diff_pair_track_width,omitempty"`
	DiffPairGap        *Distance              `protobuf:"bytes,4,opt,name=diff_pair_gap,json=diffPairGap,proto3,oneof" json:"diff_pair_gap,omitempty"`
	DiffPairViaGap     *Distance              `protobuf:"bytes,5,opt,name=diff_pair_via_gap,json=diffPairViaGap,proto3,oneof" json:"diff_pair_via_gap,omitempty"`
	// The default padstack to use for vias belonging to this netclass
	// Currently KiCad only supports specifying the drill diameter and annular size on all layers for
	// netclass via stacks.  Complex padstacks and other via features cannot be specified here.
	ViaStack *board.PadStack `protobuf:"bytes,6,opt,name=via_stack,json=viaStack,proto3,oneof" json:"via_stack,omitempty"`
	// The default padstack to use for microvias belonging to this netclass
	// Currently KiCad only supports specifying the drill diameter and annular size on all layers for
	// netclass via stacks.  Complex padstacks and other via features cannot be specified here.
	MicroviaStack *board.PadStack `protobuf:"bytes,7,opt,name=microvia_stack,json=microviaStack,proto3,oneof" json:"microvia_stack,omitempty"`
	Color         *Color          `protobuf:"bytes,8,opt,name=color,proto3,oneof" json:"color,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetClassBoardSettings) Reset() {
	*x = NetClassBoardSettings{}
	mi := &file_common_types_project_settings_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetClassBoardSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetClassBoardSettings) ProtoMessage() {}

func (x *NetClassBoardSettings) ProtoReflect() protoreflect.Message {
	mi := &file_common_types_project_settings_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetClassBoardSettings.ProtoReflect.Descriptor instead.
func (*NetClassBoardSettings) Descriptor() ([]byte, []int) {
	return file_common_types_project_settings_proto_rawDescGZIP(), []int{0}
}

func (x *NetClassBoardSettings) GetClearance() *Distance {
	if x != nil {
		return x.Clearance
	}
	return nil
}

func (x *NetClassBoardSettings) GetTrackWidth() *Distance {
	if x != nil {
		return x.TrackWidth
	}
	return nil
}

func (x *NetClassBoardSettings) GetDiffPairTrackWidth() *Distance {
	if x != nil {
		return x.DiffPairTrackWidth
	}
	return nil
}

func (x *NetClassBoardSettings) GetDiffPairGap() *Distance {
	if x != nil {
		return x.DiffPairGap
	}
	return nil
}

func (x *NetClassBoardSettings) GetDiffPairViaGap() *Distance {
	if x != nil {
		return x.DiffPairViaGap
	}
	return nil
}

func (x *NetClassBoardSettings) GetViaStack() *board.PadStack {
	if x != nil {
		return x.ViaStack
	}
	return nil
}

func (x *NetClassBoardSettings) GetMicroviaStack() *board.PadStack {
	if x != nil {
		return x.MicroviaStack
	}
	return nil
}

func (x *NetClassBoardSettings) GetColor() *Color {
	if x != nil {
		return x.Color
	}
	return nil
}

type NetClassSchematicSettings struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WireWidth     *Distance              `protobuf:"bytes,1,opt,name=wire_width,json=wireWidth,proto3,oneof" json:"wire_width,omitempty"`
	BusWidth      *Distance              `protobuf:"bytes,2,opt,name=bus_width,json=busWidth,proto3,oneof" json:"bus_width,omitempty"`
	Color         *Color                 `protobuf:"bytes,3,opt,name=color,proto3,oneof" json:"color,omitempty"`
	LineStyle     *StrokeLineStyle       `protobuf:"varint,4,opt,name=line_style,json=lineStyle,proto3,enum=kiapi.common.types.StrokeLineStyle,oneof" json:"line_style,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetClassSchematicSettings) Reset() {
	*x = NetClassSchematicSettings{}
	mi := &file_common_types_project_settings_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetClassSchematicSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetClassSchematicSettings) ProtoMessage() {}

func (x *NetClassSchematicSettings) ProtoReflect() protoreflect.Message {
	mi := &file_common_types_project_settings_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetClassSchematicSettings.ProtoReflect.Descriptor instead.
func (*NetClassSchematicSettings) Descriptor() ([]byte, []int) {
	return file_common_types_project_settings_proto_rawDescGZIP(), []int{1}
}

func (x *NetClassSchematicSettings) GetWireWidth() *Distance {
	if x != nil {
		return x.WireWidth
	}
	return nil
}

func (x *NetClassSchematicSettings) GetBusWidth() *Distance {
	if x != nil {
		return x.BusWidth
	}
	return nil
}

func (x *NetClassSchematicSettings) GetColor() *Color {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *NetClassSchematicSettings) GetLineStyle() StrokeLineStyle {
	if x != nil && x.LineStyle != nil {
		return *x.LineStyle
	}
	return StrokeLineStyle_SLS_UNKNOWN
}

type NetClass struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the netclass (the literal string "Default" for the default netclass)
	// May be empty for composite netclasses
	Name      string                     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Priority  *int32                     `protobuf:"varint,2,opt,name=priority,proto3,oneof" json:"priority,omitempty"`
	Board     *NetClassBoardSettings     `protobuf:"bytes,3,opt,name=board,proto3,oneof" json:"board,omitempty"`
	Schematic *NetClassSchematicSettings `protobuf:"bytes,4,opt,name=schematic,proto3,oneof" json:"schematic,omitempty"`
	Type      NetClassType               `protobuf:"varint,5,opt,name=type,proto3,enum=kiapi.common.project.NetClassType" json:"type,omitempty"`
	// If this is a composite netclass, a list of the names of the "real" netclasses that make it up
	Constituents  []string `protobuf:"bytes,6,rep,name=constituents,proto3" json:"constituents,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetClass) Reset() {
	*x = NetClass{}
	mi := &file_common_types_project_settings_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetClass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetClass) ProtoMessage() {}

func (x *NetClass) ProtoReflect() protoreflect.Message {
	mi := &file_common_types_project_settings_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetClass.ProtoReflect.Descriptor instead.
func (*NetClass) Descriptor() ([]byte, []int) {
	return file_common_types_project_settings_proto_rawDescGZIP(), []int{2}
}

func (x *NetClass) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NetClass) GetPriority() int32 {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return 0
}

func (x *NetClass) GetBoard() *NetClassBoardSettings {
	if x != nil {
		return x.Board
	}
	return nil
}

func (x *NetClass) GetSchematic() *NetClassSchematicSettings {
	if x != nil {
		return x.Schematic
	}
	return nil
}

func (x *NetClass) GetType() NetClassType {
	if x != nil {
		return x.Type
	}
	return NetClassType_NCT_UNKNOWN
}

func (x *NetClass) GetConstituents() []string {
	if x != nil {
		return x.Constituents
	}
	return nil
}

type TextVariables struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Variables     map[string]string      `protobuf:"bytes,1,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TextVariables) Reset() {
	*x = TextVariables{}
	mi := &file_common_types_project_settings_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TextVariables) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextVariables) ProtoMessage() {}

func (x *TextVariables) ProtoReflect() protoreflect.Message {
	mi := &file_common_types_project_settings_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextVariables.ProtoReflect.Descriptor instead.
func (*TextVariables) Descriptor() ([]byte, []int) {
	return file_common_types_project_settings_proto_rawDescGZIP(), []int{3}
}

func (x *TextVariables) GetVariables() map[string]string {
	if x != nil {
		return x.Variables
	}
	return nil
}

var File_common_types_project_settings_proto protoreflect.FileDescriptor

const file_common_types_project_settings_proto_rawDesc = "" +
	"\n" +
	"#common/types/project_settings.proto\x12\x14kiapi.common.project\x1a\x1dcommon/types/base_types.proto\x1a\x18common/types/enums.proto\x1a\x17board/board_types.proto\"\xd0\x05\n" +
	"\x15NetClassBoardSettings\x12?\n" +
	"\tclearance\x18\x01 \x01(\v2\x1c.kiapi.common.types.DistanceH\x00R\tclearance\x88\x01\x01\x12B\n" +
	"\vtrack_width\x18\x02 \x01(\v2\x1c.kiapi.common.types.DistanceH\x01R\n" +
	"trackWidth\x88\x01\x01\x12T\n" +
	"\x15diff_pair_track_width\x18\x03 \x01(\v2\x1c.kiapi.common.types.DistanceH\x02R\x12diffPairTrackWidth\x88\x01\x01\x12E\n" +
	"\rdiff_pair_gap\x18\x04 \x01(\v2\x1c.kiapi.common.types.DistanceH\x03R\vdiffPairGap\x88\x01\x01\x12L\n" +
	"\x11diff_pair_via_gap\x18\x05 \x01(\v2\x1c.kiapi.common.types.DistanceH\x04R\x0ediffPairViaGap\x88\x01\x01\x12=\n" +
	"\tvia_stack\x18\x06 \x01(\v2\x1b.kiapi.board.types.PadStackH\x05R\bviaStack\x88\x01\x01\x12G\n" +
	"\x0emicrovia_stack\x18\a \x01(\v2\x1b.kiapi.board.types.PadStackH\x06R\rmicroviaStack\x88\x01\x01\x124\n" +
	"\x05color\x18\b \x01(\v2\x19.kiapi.common.types.ColorH\aR\x05color\x88\x01\x01B\f\n" +
	"\n" +
	"_clearanceB\x0e\n" +
	"\f_track_widthB\x18\n" +
	"\x16_diff_pair_track_widthB\x10\n" +
	"\x0e_diff_pair_gapB\x14\n" +
	"\x12_diff_pair_via_gapB\f\n" +
	"\n" +
	"_via_stackB\x11\n" +
	"\x0f_microvia_stackB\b\n" +
	"\x06_color\"\xd2\x02\n" +
	"\x19NetClassSchematicSettings\x12@\n" +
	"\n" +
	"wire_width\x18\x01 \x01(\v2\x1c.kiapi.common.types.DistanceH\x00R\twireWidth\x88\x01\x01\x12>\n" +
	"\tbus_width\x18\x02 \x01(\v2\x1c.kiapi.common.types.DistanceH\x01R\bbusWidth\x88\x01\x01\x124\n" +
	"\x05color\x18\x03 \x01(\v2\x19.kiapi.common.types.ColorH\x02R\x05color\x88\x01\x01\x12G\n" +
	"\n" +
	"line_style\x18\x04 \x01(\x0e2#.kiapi.common.types.StrokeLineStyleH\x03R\tlineStyle\x88\x01\x01B\r\n" +
	"\v_wire_widthB\f\n" +
	"\n" +
	"_bus_widthB\b\n" +
	"\x06_colorB\r\n" +
	"\v_line_style\"\xdc\x02\n" +
	"\bNetClass\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1f\n" +
	"\bpriority\x18\x02 \x01(\x05H\x00R\bpriority\x88\x01\x01\x12F\n" +
	"\x05board\x18\x03 \x01(\v2+.kiapi.common.project.NetClassBoardSettingsH\x01R\x05board\x88\x01\x01\x12R\n" +
	"\tschematic\x18\x04 \x01(\v2/.kiapi.common.project.NetClassSchematicSettingsH\x02R\tschematic\x88\x01\x01\x126\n" +
	"\x04type\x18\x05 \x01(\x0e2\".kiapi.common.project.NetClassTypeR\x04type\x12\"\n" +
	"\fconstituents\x18\x06 \x03(\tR\fconstituentsB\v\n" +
	"\t_priorityB\b\n" +
	"\x06_boardB\f\n" +
	"\n" +
	"_schematic\"\x9f\x01\n" +
	"\rTextVariables\x12P\n" +
	"\tvariables\x18\x01 \x03(\v22.kiapi.common.project.TextVariables.VariablesEntryR\tvariables\x1a<\n" +
	"\x0eVariablesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01*C\n" +
	"\fNetClassType\x12\x0f\n" +
	"\vNCT_UNKNOWN\x10\x00\x12\x10\n" +
	"\fNCT_EXPLICIT\x10\x01\x12\x10\n" +
	"\fNCT_IMPLICIT\x10\x02B%Z#github.com/kicad/proto/common/typesb\x06proto3"

var (
	file_common_types_project_settings_proto_rawDescOnce sync.Once
	file_common_types_project_settings_proto_rawDescData []byte
)

func file_common_types_project_settings_proto_rawDescGZIP() []byte {
	file_common_types_project_settings_proto_rawDescOnce.Do(func() {
		file_common_types_project_settings_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_common_types_project_settings_proto_rawDesc), len(file_common_types_project_settings_proto_rawDesc)))
	})
	return file_common_types_project_settings_proto_rawDescData
}

var file_common_types_project_settings_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_common_types_project_settings_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_common_types_project_settings_proto_goTypes = []any{
	(NetClassType)(0),                 // 0: kiapi.common.project.NetClassType
	(*NetClassBoardSettings)(nil),     // 1: kiapi.common.project.NetClassBoardSettings
	(*NetClassSchematicSettings)(nil), // 2: kiapi.common.project.NetClassSchematicSettings
	(*NetClass)(nil),                  // 3: kiapi.common.project.NetClass
	(*TextVariables)(nil),             // 4: kiapi.common.project.TextVariables
	nil,                               // 5: kiapi.common.project.TextVariables.VariablesEntry
	(*Distance)(nil),                  // 6: kiapi.common.types.Distance
	(*board.PadStack)(nil),            // 7: kiapi.board.types.PadStack
	(*Color)(nil),                     // 8: kiapi.common.types.Color
	(StrokeLineStyle)(0),              // 9: kiapi.common.types.StrokeLineStyle
}
var file_common_types_project_settings_proto_depIdxs = []int32{
	6,  // 0: kiapi.common.project.NetClassBoardSettings.clearance:type_name -> kiapi.common.types.Distance
	6,  // 1: kiapi.common.project.NetClassBoardSettings.track_width:type_name -> kiapi.common.types.Distance
	6,  // 2: kiapi.common.project.NetClassBoardSettings.diff_pair_track_width:type_name -> kiapi.common.types.Distance
	6,  // 3: kiapi.common.project.NetClassBoardSettings.diff_pair_gap:type_name -> kiapi.common.types.Distance
	6,  // 4: kiapi.common.project.NetClassBoardSettings.diff_pair_via_gap:type_name -> kiapi.common.types.Distance
	7,  // 5: kiapi.common.project.NetClassBoardSettings.via_stack:type_name -> kiapi.board.types.PadStack
	7,  // 6: kiapi.common.project.NetClassBoardSettings.microvia_stack:type_name -> kiapi.board.types.PadStack
	8,  // 7: kiapi.common.project.NetClassBoardSettings.color:type_name -> kiapi.common.types.Color
	6,  // 8: kiapi.common.project.NetClassSchematicSettings.wire_width:type_name -> kiapi.common.types.Distance
	6,  // 9: kiapi.common.project.NetClassSchematicSettings.bus_width:type_name -> kiapi.common.types.Distance
	8,  // 10: kiapi.common.project.NetClassSchematicSettings.color:type_name -> kiapi.common.types.Color
	9,  // 11: kiapi.common.project.NetClassSchematicSettings.line_style:type_name -> kiapi.common.types.StrokeLineStyle
	1,  // 12: kiapi.common.project.NetClass.board:type_name -> kiapi.common.project.NetClassBoardSettings
	2,  // 13: kiapi.common.project.NetClass.schematic:type_name -> kiapi.common.project.NetClassSchematicSettings
	0,  // 14: kiapi.common.project.NetClass.type:type_name -> kiapi.common.project.NetClassType
	5,  // 15: kiapi.common.project.TextVariables.variables:type_name -> kiapi.common.project.TextVariables.VariablesEntry
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_common_types_project_settings_proto_init() }
func file_common_types_project_settings_proto_init() {
	if File_common_types_project_settings_proto != nil {
		return
	}
	file_common_types_base_types_proto_init()
	file_common_types_enums_proto_init()
	file_common_types_project_settings_proto_msgTypes[0].OneofWrappers = []any{}
	file_common_types_project_settings_proto_msgTypes[1].OneofWrappers = []any{}
	file_common_types_project_settings_proto_msgTypes[2].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_common_types_project_settings_proto_rawDesc), len(file_common_types_project_settings_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_common_types_project_settings_proto_goTypes,
		DependencyIndexes: file_common_types_project_settings_proto_depIdxs,
		EnumInfos:         file_common_types_project_settings_proto_enumTypes,
		MessageInfos:      file_common_types_project_settings_proto_msgTypes,
	}.Build()
	File_common_types_project_settings_proto = out.File
	file_common_types_project_settings_proto_goTypes = nil
	file_common_types_project_settings_proto_depIdxs = nil
}
