//
// This program source code file is part of KiCad, a free EDA CAD application.
//
// Copyright (C) 2024 KiCad Developers, see AUTHORS.txt for contributors.
//
// This program is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at your
// option) any later version.
//
// This program is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License along
// with this program.  If not, see <http://www.gnu.org/licenses/>.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: schematic/schematic_types.proto

package schematic

import (
	types "github.com/kicad/proto/common/types"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SchematicLayer int32

const (
	SchematicLayer_SL_UNKNOWN SchematicLayer = 0
)

// Enum value maps for SchematicLayer.
var (
	SchematicLayer_name = map[int32]string{
		0: "SL_UNKNOWN",
	}
	SchematicLayer_value = map[string]int32{
		"SL_UNKNOWN": 0,
	}
)

func (x SchematicLayer) Enum() *SchematicLayer {
	p := new(SchematicLayer)
	*p = x
	return p
}

func (x SchematicLayer) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SchematicLayer) Descriptor() protoreflect.EnumDescriptor {
	return file_schematic_schematic_types_proto_enumTypes[0].Descriptor()
}

func (SchematicLayer) Type() protoreflect.EnumType {
	return &file_schematic_schematic_types_proto_enumTypes[0]
}

func (x SchematicLayer) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SchematicLayer.Descriptor instead.
func (SchematicLayer) EnumDescriptor() ([]byte, []int) {
	return file_schematic_schematic_types_proto_rawDescGZIP(), []int{0}
}

// / Represents a schematic line segment, which may be a wire, bus, or graphical line
type Line struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Id    *types.KIID            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Start *types.Vector2         `protobuf:"bytes,2,opt,name=start,proto3" json:"start,omitempty"`
	End   *types.Vector2         `protobuf:"bytes,3,opt,name=end,proto3" json:"end,omitempty"`
	// *
	// One of: LAYER_BUS, LAYER_WIRE, LAYER_NOTES
	Layer         SchematicLayer `protobuf:"varint,4,opt,name=layer,proto3,enum=kiapi.schematic.types.SchematicLayer" json:"layer,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Line) Reset() {
	*x = Line{}
	mi := &file_schematic_schematic_types_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Line) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Line) ProtoMessage() {}

func (x *Line) ProtoReflect() protoreflect.Message {
	mi := &file_schematic_schematic_types_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Line.ProtoReflect.Descriptor instead.
func (*Line) Descriptor() ([]byte, []int) {
	return file_schematic_schematic_types_proto_rawDescGZIP(), []int{0}
}

func (x *Line) GetId() *types.KIID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Line) GetStart() *types.Vector2 {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *Line) GetEnd() *types.Vector2 {
	if x != nil {
		return x.End
	}
	return nil
}

func (x *Line) GetLayer() SchematicLayer {
	if x != nil {
		return x.Layer
	}
	return SchematicLayer_SL_UNKNOWN
}

type Text struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Text          *types.Text            `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Text) Reset() {
	*x = Text{}
	mi := &file_schematic_schematic_types_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Text) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Text) ProtoMessage() {}

func (x *Text) ProtoReflect() protoreflect.Message {
	mi := &file_schematic_schematic_types_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Text.ProtoReflect.Descriptor instead.
func (*Text) Descriptor() ([]byte, []int) {
	return file_schematic_schematic_types_proto_rawDescGZIP(), []int{1}
}

func (x *Text) GetText() *types.Text {
	if x != nil {
		return x.Text
	}
	return nil
}

type LocalLabel struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *types.KIID            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Position      *types.Vector2         `protobuf:"bytes,2,opt,name=position,proto3" json:"position,omitempty"`
	Text          *Text                  `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LocalLabel) Reset() {
	*x = LocalLabel{}
	mi := &file_schematic_schematic_types_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LocalLabel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalLabel) ProtoMessage() {}

func (x *LocalLabel) ProtoReflect() protoreflect.Message {
	mi := &file_schematic_schematic_types_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalLabel.ProtoReflect.Descriptor instead.
func (*LocalLabel) Descriptor() ([]byte, []int) {
	return file_schematic_schematic_types_proto_rawDescGZIP(), []int{2}
}

func (x *LocalLabel) GetId() *types.KIID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *LocalLabel) GetPosition() *types.Vector2 {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *LocalLabel) GetText() *Text {
	if x != nil {
		return x.Text
	}
	return nil
}

type GlobalLabel struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *types.KIID            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Position      *types.Vector2         `protobuf:"bytes,2,opt,name=position,proto3" json:"position,omitempty"`
	Text          *Text                  `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GlobalLabel) Reset() {
	*x = GlobalLabel{}
	mi := &file_schematic_schematic_types_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GlobalLabel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalLabel) ProtoMessage() {}

func (x *GlobalLabel) ProtoReflect() protoreflect.Message {
	mi := &file_schematic_schematic_types_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalLabel.ProtoReflect.Descriptor instead.
func (*GlobalLabel) Descriptor() ([]byte, []int) {
	return file_schematic_schematic_types_proto_rawDescGZIP(), []int{3}
}

func (x *GlobalLabel) GetId() *types.KIID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *GlobalLabel) GetPosition() *types.Vector2 {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *GlobalLabel) GetText() *Text {
	if x != nil {
		return x.Text
	}
	return nil
}

type HierarchicalLabel struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *types.KIID            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Position      *types.Vector2         `protobuf:"bytes,2,opt,name=position,proto3" json:"position,omitempty"`
	Text          *Text                  `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HierarchicalLabel) Reset() {
	*x = HierarchicalLabel{}
	mi := &file_schematic_schematic_types_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HierarchicalLabel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HierarchicalLabel) ProtoMessage() {}

func (x *HierarchicalLabel) ProtoReflect() protoreflect.Message {
	mi := &file_schematic_schematic_types_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HierarchicalLabel.ProtoReflect.Descriptor instead.
func (*HierarchicalLabel) Descriptor() ([]byte, []int) {
	return file_schematic_schematic_types_proto_rawDescGZIP(), []int{4}
}

func (x *HierarchicalLabel) GetId() *types.KIID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *HierarchicalLabel) GetPosition() *types.Vector2 {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *HierarchicalLabel) GetText() *Text {
	if x != nil {
		return x.Text
	}
	return nil
}

type DirectiveLabel struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *types.KIID            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Position      *types.Vector2         `protobuf:"bytes,2,opt,name=position,proto3" json:"position,omitempty"`
	Text          *Text                  `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DirectiveLabel) Reset() {
	*x = DirectiveLabel{}
	mi := &file_schematic_schematic_types_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DirectiveLabel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirectiveLabel) ProtoMessage() {}

func (x *DirectiveLabel) ProtoReflect() protoreflect.Message {
	mi := &file_schematic_schematic_types_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirectiveLabel.ProtoReflect.Descriptor instead.
func (*DirectiveLabel) Descriptor() ([]byte, []int) {
	return file_schematic_schematic_types_proto_rawDescGZIP(), []int{5}
}

func (x *DirectiveLabel) GetId() *types.KIID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DirectiveLabel) GetPosition() *types.Vector2 {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *DirectiveLabel) GetText() *Text {
	if x != nil {
		return x.Text
	}
	return nil
}

var File_schematic_schematic_types_proto protoreflect.FileDescriptor

const file_schematic_schematic_types_proto_rawDesc = "" +
	"\n" +
	"\x1fschematic/schematic_types.proto\x12\x15kiapi.schematic.types\x1a\x1dcommon/types/base_types.proto\"\xcf\x01\n" +
	"\x04Line\x12(\n" +
	"\x02id\x18\x01 \x01(\v2\x18.kiapi.common.types.KIIDR\x02id\x121\n" +
	"\x05start\x18\x02 \x01(\v2\x1b.kiapi.common.types.Vector2R\x05start\x12-\n" +
	"\x03end\x18\x03 \x01(\v2\x1b.kiapi.common.types.Vector2R\x03end\x12;\n" +
	"\x05layer\x18\x04 \x01(\x0e2%.kiapi.schematic.types.SchematicLayerR\x05layer\"4\n" +
	"\x04Text\x12,\n" +
	"\x04text\x18\x01 \x01(\v2\x18.kiapi.common.types.TextR\x04text\"\xa0\x01\n" +
	"\n" +
	"LocalLabel\x12(\n" +
	"\x02id\x18\x01 \x01(\v2\x18.kiapi.common.types.KIIDR\x02id\x127\n" +
	"\bposition\x18\x02 \x01(\v2\x1b.kiapi.common.types.Vector2R\bposition\x12/\n" +
	"\x04text\x18\x03 \x01(\v2\x1b.kiapi.schematic.types.TextR\x04text\"\xa1\x01\n" +
	"\vGlobalLabel\x12(\n" +
	"\x02id\x18\x01 \x01(\v2\x18.kiapi.common.types.KIIDR\x02id\x127\n" +
	"\bposition\x18\x02 \x01(\v2\x1b.kiapi.common.types.Vector2R\bposition\x12/\n" +
	"\x04text\x18\x03 \x01(\v2\x1b.kiapi.schematic.types.TextR\x04text\"\xa7\x01\n" +
	"\x11HierarchicalLabel\x12(\n" +
	"\x02id\x18\x01 \x01(\v2\x18.kiapi.common.types.KIIDR\x02id\x127\n" +
	"\bposition\x18\x02 \x01(\v2\x1b.kiapi.common.types.Vector2R\bposition\x12/\n" +
	"\x04text\x18\x03 \x01(\v2\x1b.kiapi.schematic.types.TextR\x04text\"\xa4\x01\n" +
	"\x0eDirectiveLabel\x12(\n" +
	"\x02id\x18\x01 \x01(\v2\x18.kiapi.common.types.KIIDR\x02id\x127\n" +
	"\bposition\x18\x02 \x01(\v2\x1b.kiapi.common.types.Vector2R\bposition\x12/\n" +
	"\x04text\x18\x03 \x01(\v2\x1b.kiapi.schematic.types.TextR\x04text* \n" +
	"\x0eSchematicLayer\x12\x0e\n" +
	"\n" +
	"SL_UNKNOWN\x10\x00B\"Z github.com/kicad/proto/schematicb\x06proto3"

var (
	file_schematic_schematic_types_proto_rawDescOnce sync.Once
	file_schematic_schematic_types_proto_rawDescData []byte
)

func file_schematic_schematic_types_proto_rawDescGZIP() []byte {
	file_schematic_schematic_types_proto_rawDescOnce.Do(func() {
		file_schematic_schematic_types_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_schematic_schematic_types_proto_rawDesc), len(file_schematic_schematic_types_proto_rawDesc)))
	})
	return file_schematic_schematic_types_proto_rawDescData
}

var file_schematic_schematic_types_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_schematic_schematic_types_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_schematic_schematic_types_proto_goTypes = []any{
	(SchematicLayer)(0),       // 0: kiapi.schematic.types.SchematicLayer
	(*Line)(nil),              // 1: kiapi.schematic.types.Line
	(*Text)(nil),              // 2: kiapi.schematic.types.Text
	(*LocalLabel)(nil),        // 3: kiapi.schematic.types.LocalLabel
	(*GlobalLabel)(nil),       // 4: kiapi.schematic.types.GlobalLabel
	(*HierarchicalLabel)(nil), // 5: kiapi.schematic.types.HierarchicalLabel
	(*DirectiveLabel)(nil),    // 6: kiapi.schematic.types.DirectiveLabel
	(*types.KIID)(nil),        // 7: kiapi.common.types.KIID
	(*types.Vector2)(nil),     // 8: kiapi.common.types.Vector2
	(*types.Text)(nil),        // 9: kiapi.common.types.Text
}
var file_schematic_schematic_types_proto_depIdxs = []int32{
	7,  // 0: kiapi.schematic.types.Line.id:type_name -> kiapi.common.types.KIID
	8,  // 1: kiapi.schematic.types.Line.start:type_name -> kiapi.common.types.Vector2
	8,  // 2: kiapi.schematic.types.Line.end:type_name -> kiapi.common.types.Vector2
	0,  // 3: kiapi.schematic.types.Line.layer:type_name -> kiapi.schematic.types.SchematicLayer
	9,  // 4: kiapi.schematic.types.Text.text:type_name -> kiapi.common.types.Text
	7,  // 5: kiapi.schematic.types.LocalLabel.id:type_name -> kiapi.common.types.KIID
	8,  // 6: kiapi.schematic.types.LocalLabel.position:type_name -> kiapi.common.types.Vector2
	2,  // 7: kiapi.schematic.types.LocalLabel.text:type_name -> kiapi.schematic.types.Text
	7,  // 8: kiapi.schematic.types.GlobalLabel.id:type_name -> kiapi.common.types.KIID
	8,  // 9: kiapi.schematic.types.GlobalLabel.position:type_name -> kiapi.common.types.Vector2
	2,  // 10: kiapi.schematic.types.GlobalLabel.text:type_name -> kiapi.schematic.types.Text
	7,  // 11: kiapi.schematic.types.HierarchicalLabel.id:type_name -> kiapi.common.types.KIID
	8,  // 12: kiapi.schematic.types.HierarchicalLabel.position:type_name -> kiapi.common.types.Vector2
	2,  // 13: kiapi.schematic.types.HierarchicalLabel.text:type_name -> kiapi.schematic.types.Text
	7,  // 14: kiapi.schematic.types.DirectiveLabel.id:type_name -> kiapi.common.types.KIID
	8,  // 15: kiapi.schematic.types.DirectiveLabel.position:type_name -> kiapi.common.types.Vector2
	2,  // 16: kiapi.schematic.types.DirectiveLabel.text:type_name -> kiapi.schematic.types.Text
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_schematic_schematic_types_proto_init() }
func file_schematic_schematic_types_proto_init() {
	if File_schematic_schematic_types_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_schematic_schematic_types_proto_rawDesc), len(file_schematic_schematic_types_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_schematic_schematic_types_proto_goTypes,
		DependencyIndexes: file_schematic_schematic_types_proto_depIdxs,
		EnumInfos:         file_schematic_schematic_types_proto_enumTypes,
		MessageInfos:      file_schematic_schematic_types_proto_msgTypes,
	}.Build()
	File_schematic_schematic_types_proto = out.File
	file_schematic_schematic_types_proto_goTypes = nil
	file_schematic_schematic_types_proto_depIdxs = nil
}
